# -*- coding: utf-8 -*-
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è Telegram –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
"""

import os
import logging
from pathlib import Path
try:
    from dotenv import load_dotenv
    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    env_path = Path(__file__).parent / '.env'
    if env_path.exists():
        load_dotenv(dotenv_path=env_path)
except Exception:
    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    pass

logger = logging.getLogger(__name__)
from dataclasses import dataclass, field
from typing import Dict, List

@dataclass
class BotConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    # Telegram Bot Token (–ø–æ–ª—É—á–∏—Ç—å —É @BotFather)
    TELEGRAM_TOKEN: str = os.getenv("TELEGRAM_TOKEN", "YOUR_BOT_TOKEN_HERE")
    
    # –ü–∞—Ä–æ–ª–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
    ADMIN_PASSWORD: str = os.getenv("ADMIN_PASSWORD", "CHANGE_ME_ADMIN")
    USER_PASSWORD: str = os.getenv("USER_PASSWORD", "CHANGE_ME_USER")
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    DATABASE_TYPE: str = os.getenv("DATABASE_TYPE", "sqlite")  # sqlite –∏–ª–∏ postgresql
    DATABASE_PATH: str = "task_manager.db"  # –¥–ª—è SQLite

    # PostgreSQL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è Railway)
    DATABASE_HOST: str = os.getenv("DATABASE_HOST", "localhost")
    DATABASE_PORT: int = int(os.getenv("DATABASE_PORT", "5432"))
    DATABASE_NAME: str = os.getenv("DATABASE_NAME", "railway")
    DATABASE_USER: str = os.getenv("DATABASE_USER", "postgres")
    DATABASE_PASSWORD: str = os.getenv("DATABASE_PASSWORD", "")
    DATABASE_URL: str = os.getenv("DATABASE_URL", "")  # –ø–æ–ª–Ω—ã–π URL –∏–∑ Railway
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    NOTIFICATION_CHECK_INTERVAL: int = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    REMINDER_HOURS_BEFORE: List[int] = field(default_factory=lambda: [24, 6, 1])  # –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    EXPORT_FOLDER: str = "exports"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–≥—Ä–∞–º–º
    CHARTS_FOLDER: str = "charts"
    
    # –õ–∏–º–∏—Ç—ã
    MAX_TASK_TITLE_LENGTH: int = 100
    MAX_TASK_DESCRIPTION_LENGTH: int = 500
    MAX_TASKS_PER_PAGE: int = 5

    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–¥–≤–∏–≥ –≤ —á–∞—Å–∞—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC)
    DISPLAY_TZ_OFFSET_HOURS: int = int(os.getenv("TZ_OFFSET_HOURS", "5"))

    def get_database_url(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self.DATABASE_URL:
            # –ó–∞–º–µ–Ω—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Railway hostname –Ω–∞ external, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if "postgres.railway.internal" in self.DATABASE_URL:
                logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Railway hostname. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å external DATABASE_URL")
            return self.DATABASE_URL

        if self.DATABASE_TYPE.lower() == "postgresql":
            return f"postgresql://{self.DATABASE_USER}:{self.DATABASE_PASSWORD}@{self.DATABASE_HOST}:{self.DATABASE_PORT}/{self.DATABASE_NAME}"
        else:
            return f"sqlite:///{self.DATABASE_PATH}"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
config = BotConfig()

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
EMOJIS = {
    'menu': 'üìã',
    'create_task': '‚ûï',
    'my_tasks': 'üìù',
    'all_tasks': 'üìä',
    'reports': 'üìà',
    'gantt': 'üìâ',
    'settings': '‚öôÔ∏è',
    'back': '‚¨ÖÔ∏è',
    'next': '‚û°Ô∏è',
    'done': '‚úÖ',
    'pending': 'üïê',
    'overdue': 'üî¥',
    'new': 'üÜï',
    'admin': 'üëë',
    'user': 'üë§',
    'deadline': '‚è∞',
    'priority_high': 'üî•',
    'priority_medium': 'üü°',
    'priority_low': 'üü¢',
    'excel': 'üìä',
    'chart': 'üìà',
    'notification': 'üîî',
    'warning': '‚ö†Ô∏è',
    'success': '‚úÖ',
    'error': '‚ùå',
    'info': '‚ÑπÔ∏è'
}

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
TASK_STATUS = {
    'new': '–ù–æ–≤–∞—è',
    'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
    'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
    'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞',
    'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞'
}

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–¥–∞—á
TASK_PRIORITY = {
    'low': '–ù–∏–∑–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π',
    'high': '–í—ã—Å–æ–∫–∏–π'
}

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_ROLES = {
    'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    'user': '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
}
