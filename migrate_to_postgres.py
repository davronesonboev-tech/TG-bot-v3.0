# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL
"""

import sqlite3
import logging
from datetime import datetime
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database import User, Task, Notification, TaskHistory, Base
from config import config

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def migrate_sqlite_to_postgres():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL"""

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ SQLite
    sqlite_conn = sqlite3.connect('task_manager.db')
    sqlite_conn.row_factory = sqlite3.Row

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
    postgres_engine = create_engine(config.get_database_url())
    Base.metadata.create_all(bind=postgres_engine)
    PostgresSession = sessionmaker(bind=postgres_engine)
    postgres_db = PostgresSession()

    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logger.info("üìù –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        sqlite_cursor = sqlite_conn.cursor()
        sqlite_cursor.execute('SELECT * FROM users')
        users_data = sqlite_cursor.fetchall()

        users_map = {}  # –î–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö ID –≤ –Ω–æ–≤—ã–µ
        for user_row in users_data:
            user = User(
                telegram_id=user_row['telegram_id'],
                username=user_row['username'],
                first_name=user_row['first_name'],
                last_name=user_row['last_name'],
                role=user_row['role'],
                is_active=user_row['is_active'],
                registered_at=datetime.fromisoformat(user_row['registered_at']) if user_row['registered_at'] else datetime.utcnow(),
                last_activity=datetime.fromisoformat(user_row['last_activity']) if user_row['last_activity'] else datetime.utcnow()
            )
            postgres_db.add(user)
            postgres_db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            users_map[user_row['id']] = user.id

        postgres_db.commit()
        logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(users_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
        logger.info("üìã –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á...")
        sqlite_cursor.execute('SELECT * FROM tasks')
        tasks_data = sqlite_cursor.fetchall()

        tasks_map = {}  # –î–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö ID –≤ –Ω–æ–≤—ã–µ
        for task_row in tasks_data:
            task = Task(
                title=task_row['title'],
                description=task_row['description'],
                creator_id=users_map.get(task_row['creator_id']),
                assignee_id=users_map.get(task_row['assignee_id']) if task_row['assignee_id'] else None,
                status=task_row['status'],
                priority=task_row['priority'],
                deadline=datetime.fromisoformat(task_row['deadline']) if task_row['deadline'] else None,
                created_at=datetime.fromisoformat(task_row['created_at']) if task_row['created_at'] else datetime.utcnow(),
                updated_at=datetime.fromisoformat(task_row['updated_at']) if task_row['updated_at'] else datetime.utcnow(),
                completed_at=datetime.fromisoformat(task_row['completed_at']) if task_row['completed_at'] else None
            )
            postgres_db.add(task)
            postgres_db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            tasks_map[task_row['id']] = task.id

        postgres_db.commit()
        logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(tasks_data)} –∑–∞–¥–∞—á")

        # –ú–∏–≥—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        logger.info("üîî –ú–∏–≥—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        sqlite_cursor.execute('SELECT * FROM notifications')
        notifications_data = sqlite_cursor.fetchall()

        for notif_row in notifications_data:
            notification = Notification(
                user_id=users_map.get(notif_row['user_id']),
                task_id=tasks_map.get(notif_row['task_id']),
                type=notif_row['type'],
                message=notif_row['message'],
                is_sent=notif_row['is_sent'],
                scheduled_at=datetime.fromisoformat(notif_row['scheduled_at']) if notif_row['scheduled_at'] else datetime.utcnow(),
                sent_at=datetime.fromisoformat(notif_row['sent_at']) if notif_row['sent_at'] else None,
                created_at=datetime.fromisoformat(notif_row['created_at']) if notif_row['created_at'] else datetime.utcnow()
            )
            postgres_db.add(notification)

        postgres_db.commit()
        logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(notifications_data)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

        # –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á
        logger.info("üìö –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á...")
        sqlite_cursor.execute('SELECT * FROM task_history')
        history_data = sqlite_cursor.fetchall()

        for history_row in history_data:
            history = TaskHistory(
                task_id=tasks_map.get(history_row['task_id']),
                user_id=users_map.get(history_row['user_id']),
                action=history_row['action'],
                old_value=history_row['old_value'],
                new_value=history_row['new_value'],
                created_at=datetime.fromisoformat(history_row['created_at']) if history_row['created_at'] else datetime.utcnow()
            )
            postgres_db.add(history)

        postgres_db.commit()
        logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(history_data)} –∑–∞–ø–∏—Å–µ–π")

        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        logger.info("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        logger.info("   2. –ï—Å–ª–∏ –≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª task_manager.db")
        logger.info("   3. –û–±–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway –Ω–∞ DATABASE_TYPE=postgresql")

    except Exception as e:
        postgres_db.rollback()
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise
    finally:
        sqlite_conn.close()
        postgres_db.close()

if __name__ == "__main__":
    print("üîÑ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ SQLite —Ñ–∞–π–ª–∞
    import os
    if not os.path.exists('task_manager.db'):
        print("‚ùå –§–∞–π–ª task_manager.db –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.")
        exit(1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏–∏
    sqlite_conn = sqlite3.connect('task_manager.db')
    sqlite_cursor = sqlite_conn.cursor()

    for table in ['users', 'tasks', 'notifications', 'task_history']:
        sqlite_cursor.execute(f'SELECT COUNT(*) FROM {table}')
        count = sqlite_cursor.fetchone()[0]
        print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")

    sqlite_conn.close()

    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï!")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –≤ PostgreSQL.")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
    print("1. PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
    print("2. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("3. –£ –≤–∞—Å –µ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–∞–Ω–Ω—ã—Ö")

    response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ").lower().strip()
    if response == 'yes':
        migrate_sqlite_to_postgres()
    else:
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
